# Проверяем режим сбора профиля и работы правила
query AutoProfile($rule) from Profiling_Mode {
    rule == $rule
}

# Сверка с профилем
query CheckProfileApplication($login, $src_ip, $dst_ip, $access_type) from User_Logon_Profile {
    access_type == $access_type
    and login == $login   
    and src_ip == $src_ip
    and dst_ip == $dst_ip # or dst_host == $dst_host
    # дополинтельные проверки, специфичные для профиля
    # and dst_path == $dst_path # имя репозитория, БД, проекта, чего угодно
    # and additional_data == $additional_data 

}

# Проверяем, если ли вообще в профиле такой пользователь
query CheckUsername($username) from User_Logon_Profile {
    login == $username
}

# Проверяем, использовал ли пользователь раньше этот адрес
query CheckIP($username, $src_ip) from User_Logon_Profile {
    login == $username
    and src_ip == $src_ip
}

# Проверяем, изменился ли тип доступа
#query CheckAccessType($username, $src_ip, $access_type) from User_Logon_Profile {  
#    access_type == $access_type
#    and login == $username
#    and src_ip == $src_ip
#}

event Anomaly_Logon_Application:
    key:
        event_src.host
    filter {
        filter::NotFromCorrelator()
        and action == "login"
        and status == "success"
        and subject.account.name != null
        and src.ip != null
        # Тут могут быть какие-то дополнительные условия
        # and event_src.title == ""

        # Сверка с профилем
        and not exec_query("CheckProfileApplication", [])
    }
    
rule For_Profilling: Anomaly_Logon_Application

    init {
        # Табличный список для включения и отключения механизма автоматического сбора профилей:
        # 0 - Профиль собран, обогащение отключено, правило обращается напрямую в профиль;
        # 1 - Правило работает по собранному профилю, но профиль продолжает собираться;
        # 2 - Профиль на стадии сбора, корреляция не срабатывает
        
        # Если в табличке нет правила, то считаем, что правило работает в режиме автопрофилирования
        $auto_profile = coalesce(select_query_first("AutoProfile", ["For_Profilling"], "auto_profiling"), 1)
    }
    
    on Anomaly_Logon_Application {
        # OLD
        $subject.name = subject.name # OLD
        $subject.domain = subject.domain # OLD
        $subject.id = subject.id # OLD

        $subject.account.name = subject.account.name
        $subject.account.domain = subject.account.domain
        $subject.account.session_id = subject.account.session_id
        $subject.account.id = subject.account.id
        $subject.account.privileges = subject.account.privileges

        $object.account.name = object.account.name
        $object.account.domain = object.account.domain
        $object.account.session_id = object.account.session_id
        $object.account.id = object.account.id
        $object.account.privileges = object.account.privileges
        
        $object.name = object.name
        $object.path = object.path
        $object.fullpath = object.fullpath
        $object.type = object.type
        $object.property = object.property
        $object.value = object.value
        $object.query = object.query

        $datafield1 = datafield1
        $datafield2 = datafield2
        $datafield3 = datafield3
        $datafield4 = datafield4
        $datafield5 = datafield5
        $datafield6 = datafield6
        $datafield7 = datafield7
        $datafield8 = datafield8
        $datafield9 = datafield9
        $datafield10 = datafield10

        $src.fqdn = src.fqdn
        $src.port = src.port
        $src.host = src.host
        $src.ip = src.ip
        $src.hostname = src.hostname
        $src.asset = src.asset
        $src.geo.org = src.geo.org
        $src.geo.country = src.geo.country

        $dst.asset = dst.asset
        $dst.host = dst.host
        $dst.ip = dst.ip
        $dst.hostname = dst.hostname
        $dst.fqdn = dst.fqdn
        $dst.port = dst.port
        $dst.mac = dst.mac

        $assigned_src_ip = assigned_src_ip

        $event_src.ip = event_src.ip
        $event_src.hostname = event_src.hostname
        $event_src.host = event_src.host
        $event_src.asset = event_src.asset
        $event_src.host = event_src.host
        $event_src.title = event_src.title
        $event_src.subsys = event_src.subsys
        $event_src.vendor = event_src.vendor
        $event_src.title = event_src.title
        $event_src.category = event_src.category
        $event_src.rule = event_src.rule
        
        # Проверка, если ли для пользователя собранный профиль
        if not exec_query("CheckUsername", [lower(subject.account.name)]) then
            $reason = "no_user"
            $importance = "high" # Важность может быть low для систем вроде VPN, почты (которыми пользуются все сотрудники)
        # Если пользователь есть в профиле, ищем конкретные отличия
        else
            # Проверям, не новый ли адрес
            if not exec_query("CheckIP",  [lower(subject.account.name), string(src.ip)]) then 
                $reason = "new_address"
                $importance = "high" # Тут всегда максимальная важность, потому что это самое опасное отличие от профиля
            endif

            # Проверяем другие условия, характерные для приложения. Должно покрывать поля, передаваемый в фильтр
            # Обратите внимание, что проверки в порядке важности сработки
            # Далее примеры, которые нужно заменить своими, актуальными для конретного приложения
            # Repo
            #if not exec_query("CheckRepo",  [lower(subject.account.name), lower(datafield2)]) then
            #    $reason = $reason + "|new_repo"
            #    $importance = coalesce($importance, "low")
            #endif
            # UA
            #if subject.process.meta != null and not exec_query("CheckAgent",  [lower(subject.account.name), lower(subject.process.meta)]) then
            #    $reason = $reason + "|new_agent"
            #    $importance = coalesce($importance, "info") # Просто потому что VsCode постоянно обновляется и это не показатель
            #endif
        endif

        # Если все проверки завершились, но $reason остался пустым, запись могла не успеть попасть в ТС на момент сработки фильтра, такую сработку дропаем
        if $reason == null then
            close
        endif 
        
        # Если правило работает в режиме сбора профиля, то emit не нужен. Но close не внесет запись в ТС, поэтому костыль через оборащение
        if $auto_profile == 2 then
            $importance = "info"
            $detect = "drop"
        endif 

        $alert.key = 
        $alert.context = $reason
    }

    insert_into ESC_Risk_User_Logon_Profiles_2 if $auto_profile != 0 {        
        risk_type = # "-|money|or smth"
        access_type = # $event_src.vendor or #event_src,title
        login = # user lower($subject.account.name)      
        src_ip = # source ip string($src.ip)
        # dst_ip = lower($event_src.host) # destination ip 
        # dst_path = coalesce(lower($datafield2), "")
        # additional_data = coalesce(lower($subject.process.meta), "")
    }
   
emit {
    $correlation_type = ""

    $subject = "account"
    $action = "login"
    $object = "application"
    $status = "success"
        
    $category.generic = "Anomaly"
    $category.high = "User Behavior Anomaly"
    $category.low = "Detection"

    $incident.aggregation.key = join([$correlation_name, $src.ip, $subject.account.name], "|")
    $incident.severity = $importance
    $incident.category = "Undefined"
    $incident.aggregation.timeout = 2h
}
